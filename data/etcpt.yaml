---
- name: Client API on AWS API Gateway
  description: > 
    Architected a Client API which will allow ETC to pursue new line of security clearing business from online brokers,
    and integrate their trading platforms with ETC back office; pilot project for explorering AWS cloud platform option
  situation: >
    ETC back office system is implemented with MS SQL Database system, and FTP is the main IO with external system.
    I was assigned to architect a Client API for clients to integrate their platform with ETC back office system.  
    The COO of IT is avocating using cloud technology while the CEO is having some reserve for cloud security.  
    The project was planned to be released on mid-January of 2018.
  action: >
    I have designed the system that address both concerns and provided the best customer experience in terms of 
    reliability, performance, security and ease of integration.
    First I drafted a proposal to outline the high level system overview, and compare designs using AWS API Gateway and 
    on premise WebAPI.  After AWS design was selected, I wrote user stories to describes system requirements and created 
    the architecture design document.
    The implementation has 4 sprints, 1st sprint focus on basic end-to-end data flow from API Gateway request, all to way to back office database;
    2nd sprint focus on key feature implementation, such as API security, data encryption, JSON schema, workflow state transistion
    3rd sprint focus on system configuration and alerts
    4th sprint focus on integration testing, CI, bug fixes
    At the end of each sprint, a demo is scheduled to communicate progress and request for input
  result:
    First 2 sprints were completed on time, and then laid off pull me out of the project
  stories:
    - topic: Architected an API framework on AWS with the following key requirements
      score: 2
      subs:
        - topic: High level cloud security (Access and Data)
          score: 2
        - topic: ETC back office platform must remain sealed from external network access
          score: 2
        - topic: Flexible and simple to expand new functionalities
          score: 2
        - topic: Reliable workflow execution
          score: 2
        - topic: Self-monitoring and automated alert
          score: 2
    - topic: Project planning with agile methodology, 2 resources, 4 sprints
      score: 5
    - topic: "Enterprise service bus pattern was implemented as a serverless microservice with the following AWS technologies: SQS, S3, DynamoDb and Lambda with dotnetcore 1.0 C#"
      score: 1
    - topic: API access is controlled by both AWS signature v4 and API key, on API Gateway with IAM user credential
      score: 3
    - topic: All client data stored on AWS are encrypted with Integrated Encryption Scheme
      score: 2
      subs:
        - topic: Each data payload is encrypted with unique AES 256-bit cipher key and IV
          score: 2
        - topic: AES 256-bit cipher key and IV are encrypted with RSA 2048-bit public key
          score: 2
        - topic: The public key is stored in encrypted S3 bucket with KMS rotating key
          score: 2
    - topic: Worker processes are implemented with .Net 4.7 accessing data on MS SQL Server
      score: 4
- name: Continuous Integration (CI) Implementation
  description: Defined and applied new Application Lifecycle Management process for development team (dev team), using Team Foundation Server 2017
  stories:
    - topic: Web application CI
      score: 2
      subs:
        - topic: Created build and deploy definition for different application types (ASP.Net, WebAPI, NuGet package)
          score: 2
        - topic: Create self-hosted NuGet server
          score: 3
        - topic: Created PowerShell scripts to supplement steps not provided by standard templates
          score: 2
    - topic: Databases CI
      score: 2
      subs:
        - topic: Created build and deploy definition for database using Redgate DLM automation
          score: 2
        - topic: Handled purchasing and setting up SQL Clone for database cloning
          score: 2
        - topic: Created policy and documentation for database cloning
          score: 2
        - topic: Created PowerShell scripts for database cloning automation
          score: 2
        - topic: Created QA environment
          score: 3
        - topic: Migrated TFVC source repositories with full check-in history from TFS 2010
          score: 3
        - topic: Created user guide and hosted lunch and learn sessions to coach dev team to use TFS agile process template and Kanban board
          score: 2
        - topic: Integrated TFS with proprietary ticketing system (GTS), using TFS Webhook and Web API
          score: 3
        - topic: Defined policy for Git source control workflow
          score: 2
        - topic: "Created user guide to help developers to learn basic Git operations: clone, branch, pull, push, rebase, pull request, merge"
          score: 4
        - topic: Hosted lunch and learn sessions to coach dev team to migrate from TFVC to Git for both application and database projects
          score: 2
- name: IT Strategic Planning / Roadmap
  description: CEO appointed to lead the effort to create IT Strategic Plan and Roadmap process
  stories:
    - topic: Created iterative 2-year strategic plan and quarterly roadmap process template
      score: 1
    - topic: Strategic plan defines IT mission, vision, principles, goals and objectives
      score: 1
    - topic: Roadmap plan undertakes projects in certain quarters to reach the strategic goal guided by principles 
      score: 1
- name: Kafka / CoreOS
  description: Creating a prototype to convert real time trading/settlement data coming from multiple sources into Kafka data stream
  stories:
    - topic: Created bash script to automate CoreOS VM provisioning on Hyper-V
      score: 2
    - topic: Hosted Kafka instances on docker containers
      score: 2
    - topic: Demonstrated basic Kafka functionalities with Python
      score: 4
- name: System Architecture Assessment
  description: Documented the current system architecture and proposed a NextGen vision, the resulting document was used for FINRA audit
  stories:
    - topic: Documented the current system architecture with different views
      score: 3
      subs:
        - topic: High level dataflow and process workflow
          score: 3
        - topic: Interacting parties
          score: 3
        - topic: System (software and hardware) components
          score: 3
        - topic: Application development lifecycle
          score: 3
    - topic: The resulting system architecture document was used for FINRA audit
      score: 2
    - topic: Created a NextGen System Architecture vision document using microservices methodology with on premise Azure Service Fabric
      score: 2
    - topic: Demonstrated microservice design and integration with current system stack
      score: 3
      subs:
        - topic: Trading / Settlement Holiday Calendar API
          score: 3
        - topic: FTP API
          score: 3
- name: Tooling Assessment / Recommendation
  description: >
    Identified and recommended new tooling software in the area of Team Communication, Project Management, Application Lifecycle Management, and Development
  stories:
    - topic: Recommended, deployed and promoted on-premise Confluence as IT knowledge wiki
      score: 2
    - topic: Recommended, deployed and coached of using TFS 2017 and Visual Studio 2017
      score: 2